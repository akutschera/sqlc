// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package querytest

import (
	"context"
	"database/sql"
)

const listAuthorsByCheapestBook = `-- name: ListAuthorsByCheapestBook :many
SELECT
    author_id, min(b.price) as min_price
From books b inner join authors a on a.id = b.author_id
GROUP BY b.author_id
ORDER BY min_price
`

type ListAuthorsByCheapestBookRow struct {
	AuthorID sql.NullInt32
	MinPrice interface{}
}

func (q *Queries) ListAuthorsByCheapestBook(ctx context.Context) ([]ListAuthorsByCheapestBookRow, error) {
	rows, err := q.db.QueryContext(ctx, listAuthorsByCheapestBook)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAuthorsByCheapestBookRow
	for rows.Next() {
		var i ListAuthorsByCheapestBookRow
		if err := rows.Scan(&i.AuthorID, &i.MinPrice); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
